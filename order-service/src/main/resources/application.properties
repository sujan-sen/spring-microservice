eureka.client.serviceUrl.defaultZone= http://${registry.host:localhost}:${registry.port:8000}/eureka/
eureka.client.healthcheck.enabled= false
#eureka.client.fetchRegistry=true
eureka.instance.leaseRenewalIntervalInSeconds= 1
eureka.instance.leaseExpirationDurationInSeconds= 2
#Generating Unique Instance Id for Eureka Server
eureka.instance.instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}

spring.application.name=order-service
#server.port=9001
#Random Port
server.port=0

#Kafka Config for implementation of SAGA Design Pattern, used for communication between microservices
#Consumer for Credit Service Event
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=order-grp
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.topic=credit-service-event

#Producer for Order Service Events
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.topic=order-service-event

#DB Config
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5
spring.datasource.hikari.poolName=HikariOrderPool
spring.jpa.show-sql=true
spring.jpa.generate-ddl=false
spring.datasource.url=jdbc:mysql://localhost:3306/order_schema
spring.datasource.username=root
spring.datasource.password=a3!BM!DNA
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.jpa.hibernate.use-new-id-generator-mappings=false
#logging.level.root=debug